{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ISCC - Software Development Kit # iscc-sdk is a Python development kit that implements for creating and managing ISCC ( International Standard Content Code ) What is an ISCC # The ISCC is a similarity preserving identifier for digital media assets. ISCCs are generated algorithmically from digital content, just like cryptographic hashes. However, instead of using a single cryptographic hash function to identify data only, the ISCC uses various algorithms to create a composite identifier that exhibits similarity-preserving properties (soft hash). The component-based structure of the ISCC identifies content at multiple levels of abstraction. Each component is self-describing, modular, and can be used separately or with others to aid in various content identification tasks. The algorithmic design supports content deduplication, database synchronization, indexing, integrity verification, timestamping, versioning, data provenance, similarity clustering, anomaly detection, usage tracking, allocation of royalties, fact-checking and general digital asset management use-cases. What is iscc-sdk # iscc-sdk is built on top of iscc-core and adds high level features for generating and handling ISCC codes for all the different mediatypes: mediatype detection metadata extraction and embedding mediatype specific content extraction and pre-processing iscc indexing and search Installation # Use the package manager pip to install iscc-core . pip install iscc-sdk Documentation # https://sdk.iscc.codes Project Status # The ISCC has been accepted by ISO as full work item ISO/AWI 24138 - International Standard Content Code and is currently being standardized at TC 46/SC 9/WG 18. https://www.iso.org/standard/77899.html Attention The iscc-sdk library and the accompanying documentation is under development. API changes and other backward incompatible changes are to be expected until the upcoming v1.5 stable release. Maintainers # @titusz Contributing # Pull requests are welcome. For significant changes, please open an issue first to discuss your plans. Please make sure to update tests as appropriate. You may also want join our developer chat on Telegram at https://t.me/iscc_dev . Changelog # 0.1.0 - Unreleased # Initial release with support for ISCC Content-Code Image","title":"Overview"},{"location":"#iscc-software-development-kit","text":"iscc-sdk is a Python development kit that implements for creating and managing ISCC ( International Standard Content Code )","title":"ISCC - Software Development Kit"},{"location":"#what-is-an-iscc","text":"The ISCC is a similarity preserving identifier for digital media assets. ISCCs are generated algorithmically from digital content, just like cryptographic hashes. However, instead of using a single cryptographic hash function to identify data only, the ISCC uses various algorithms to create a composite identifier that exhibits similarity-preserving properties (soft hash). The component-based structure of the ISCC identifies content at multiple levels of abstraction. Each component is self-describing, modular, and can be used separately or with others to aid in various content identification tasks. The algorithmic design supports content deduplication, database synchronization, indexing, integrity verification, timestamping, versioning, data provenance, similarity clustering, anomaly detection, usage tracking, allocation of royalties, fact-checking and general digital asset management use-cases.","title":"What is an ISCC"},{"location":"#what-is-iscc-sdk","text":"iscc-sdk is built on top of iscc-core and adds high level features for generating and handling ISCC codes for all the different mediatypes: mediatype detection metadata extraction and embedding mediatype specific content extraction and pre-processing iscc indexing and search","title":"What is iscc-sdk"},{"location":"#installation","text":"Use the package manager pip to install iscc-core . pip install iscc-sdk","title":"Installation"},{"location":"#documentation","text":"https://sdk.iscc.codes","title":"Documentation"},{"location":"#project-status","text":"The ISCC has been accepted by ISO as full work item ISO/AWI 24138 - International Standard Content Code and is currently being standardized at TC 46/SC 9/WG 18. https://www.iso.org/standard/77899.html Attention The iscc-sdk library and the accompanying documentation is under development. API changes and other backward incompatible changes are to be expected until the upcoming v1.5 stable release.","title":"Project Status"},{"location":"#maintainers","text":"@titusz","title":"Maintainers"},{"location":"#contributing","text":"Pull requests are welcome. For significant changes, please open an issue first to discuss your plans. Please make sure to update tests as appropriate. You may also want join our developer chat on Telegram at https://t.me/iscc_dev .","title":"Contributing"},{"location":"#changelog","text":"","title":"Changelog"},{"location":"#010-unreleased","text":"Initial release with support for ISCC Content-Code Image","title":"0.1.0 - Unreleased"},{"location":"image/","text":"ISCC - Image Processing # Image handling module image_normalize ( img ) # Normalize image for hash calculation. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Sequence[int] Normalized and flattened image as 1024-pixel array (from 32x32 gray pixels) image_exif_transpose ( img ) # Transpose image according to EXIF Orientation tag Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image EXIF transposed image image_fill_transparency ( img ) # Add white background to image if it has alpha transparency. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with transparency replaced by white background image_trim_border ( img ) # Trim uniform colored (empty) border. Takes the upper left pixel as reference for border color. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with uniform colored (empty) border removed. image_meta_extract ( fp ) # Extract metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description dict Metadata mapped to IsccMeta schema image_meta_embed ( fp , meta ) # Embed metadata into image. Parameters: Name Type Description Default fp str Filepath to image file required meta IsccMeta Metadata to embed into image required Returns: Type Description None image_meta_delete ( fp ) # Delete all metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required image_thumbnail ( fp ) # Create a thumbnail for an image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description Image.Image Thumbnail image as PIL Image object image_to_data_url ( img ) # Convert PIL Image object to WebP Data-URL. Parameters: Name Type Description Default img Image.Image PIL Image object to encode as WebP Data-URL. required Returns: Type Description str Data-URL string","title":"Image"},{"location":"image/#iscc-image-processing","text":"Image handling module","title":"ISCC - Image Processing"},{"location":"image/#iscc_sdk.image.image_normalize","text":"Normalize image for hash calculation. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Sequence[int] Normalized and flattened image as 1024-pixel array (from 32x32 gray pixels)","title":"image_normalize()"},{"location":"image/#iscc_sdk.image.image_exif_transpose","text":"Transpose image according to EXIF Orientation tag Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image EXIF transposed image","title":"image_exif_transpose()"},{"location":"image/#iscc_sdk.image.image_fill_transparency","text":"Add white background to image if it has alpha transparency. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with transparency replaced by white background","title":"image_fill_transparency()"},{"location":"image/#iscc_sdk.image.image_trim_border","text":"Trim uniform colored (empty) border. Takes the upper left pixel as reference for border color. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with uniform colored (empty) border removed.","title":"image_trim_border()"},{"location":"image/#iscc_sdk.image.image_meta_extract","text":"Extract metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description dict Metadata mapped to IsccMeta schema","title":"image_meta_extract()"},{"location":"image/#iscc_sdk.image.image_meta_embed","text":"Embed metadata into image. Parameters: Name Type Description Default fp str Filepath to image file required meta IsccMeta Metadata to embed into image required Returns: Type Description None","title":"image_meta_embed()"},{"location":"image/#iscc_sdk.image.image_meta_delete","text":"Delete all metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required","title":"image_meta_delete()"},{"location":"image/#iscc_sdk.image.image_thumbnail","text":"Create a thumbnail for an image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description Image.Image Thumbnail image as PIL Image object","title":"image_thumbnail()"},{"location":"image/#iscc_sdk.image.image_to_data_url","text":"Convert PIL Image object to WebP Data-URL. Parameters: Name Type Description Default img Image.Image PIL Image object to encode as WebP Data-URL. required Returns: Type Description str Data-URL string","title":"image_to_data_url()"},{"location":"main/","text":"ISCC - Main High-Level Functions # SDK main top-level functions. code_iscc ( fp ) # Generate ISCC-CODE. The ISCC-CODE is a composite of Meta, Content, Data and Instance Codes. Parameters: Name Type Description Default fp str Filepath used for ISCC-CODE creation. required Returns: Type Description IsccMeta ISCC metadata including ISCC-CODE and merged metadata from ISCC-UNITs. code_meta ( fp ) # Generate Meta-Code from digital asset. Parameters: Name Type Description Default fp str Filepath used for Meta-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Meta-Code and extracted metadata fields. code_content ( fp ) # Detect mediatype and create corresponding Content-Code. Parameters: Name Type Description Default fp str Filepath required Returns: Type Description IsccMeta Content-Code wrapped in ISCC metadata. code_image ( fp ) # Generate Content-Code Image. Parameters: Name Type Description Default fp str Filepath used for Image-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Image-Code. code_data ( fp ) # Create ISCC Data-Code. The Data-Code is a similarity preserving hash of the input data. Parameters: Name Type Description Default fp str Filepath used for Data-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Data-Code. code_instance ( fp ) # Create ISCC Instance-Code. The Instance-Code is prefix of a cryptographic hash (blake3) of the input data. It\u00b4s purpose is to serve as a checksum that detects even minimal changes to the data of the referenced media asset. For cryptographicaly secure integrity checking a full 256-bit multihash is provided with the datahash field. Parameters: Name Type Description Default fp str Filepath used for Instance-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Instance-Code, datahash and filesize.","title":"Main"},{"location":"main/#iscc-main-high-level-functions","text":"SDK main top-level functions.","title":"ISCC - Main High-Level Functions"},{"location":"main/#iscc_sdk.main.code_iscc","text":"Generate ISCC-CODE. The ISCC-CODE is a composite of Meta, Content, Data and Instance Codes. Parameters: Name Type Description Default fp str Filepath used for ISCC-CODE creation. required Returns: Type Description IsccMeta ISCC metadata including ISCC-CODE and merged metadata from ISCC-UNITs.","title":"code_iscc()"},{"location":"main/#iscc_sdk.main.code_meta","text":"Generate Meta-Code from digital asset. Parameters: Name Type Description Default fp str Filepath used for Meta-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Meta-Code and extracted metadata fields.","title":"code_meta()"},{"location":"main/#iscc_sdk.main.code_content","text":"Detect mediatype and create corresponding Content-Code. Parameters: Name Type Description Default fp str Filepath required Returns: Type Description IsccMeta Content-Code wrapped in ISCC metadata.","title":"code_content()"},{"location":"main/#iscc_sdk.main.code_image","text":"Generate Content-Code Image. Parameters: Name Type Description Default fp str Filepath used for Image-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Image-Code.","title":"code_image()"},{"location":"main/#iscc_sdk.main.code_data","text":"Create ISCC Data-Code. The Data-Code is a similarity preserving hash of the input data. Parameters: Name Type Description Default fp str Filepath used for Data-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Data-Code.","title":"code_data()"},{"location":"main/#iscc_sdk.main.code_instance","text":"Create ISCC Instance-Code. The Instance-Code is prefix of a cryptographic hash (blake3) of the input data. It\u00b4s purpose is to serve as a checksum that detects even minimal changes to the data of the referenced media asset. For cryptographicaly secure integrity checking a full 256-bit multihash is provided with the datahash field. Parameters: Name Type Description Default fp str Filepath used for Instance-Code creation. required Returns: Type Description IsccMeta ISCC metadata including Instance-Code, datahash and filesize.","title":"code_instance()"},{"location":"mediatype/","text":"ISCC - Mediatype Detection # Detect and map RFC6838 mediatypes to ISCC processing modes. mediatype_and_mode ( fp ) # Detect mediatype and processing mode for a file. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_and_mode('some.pdf') ('application/pdf', 'text') Parameters: Name Type Description Default fp str Filepath required Returns: Type Description tuple[str, str] A tuple of mediatype and mode mediatype_guess ( data , file_name = None ) # Guess mediatype from raw data or filename. First try to guess by file extension. If that fails we match by content sniffing. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_guess(b'GIF89a') 'image/gif' Parameters: Name Type Description Default data bytes Raw file data (first 4096 bytes recommended) required file_name Optional[str] Filename for guessing based on file extension None Returns: Type Description str Media type sting mediatype_normalize ( mime ) # Normalize mediatype string. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_normalize(\"audio/x-aiff\") '\"audio/aiff\"' Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description str Normalized mediatype string mediatype_supported ( mime ) # Check if mediatype is supported. Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description bool True if mediatype is supported mediatype_from_name ( name ) # Guess mediatype from filename or URL. Parameters: Name Type Description Default name str Filename or URL required Returns: Type Description str Mediatype string mediatype_from_data ( data ) # Guess mediatype by sniffing raw header data. Parameters: Name Type Description Default data bytes Raw fileheader data (first 4096 bytes recommended) required Returns: Type Description str Mediatype string mediatype_clean ( mime ) # Clean mediatype/content-type string or first entry of a list of mimetype strings. Also removes semicolon separated encoding information. Returns: Type Description str Mediatype string mediatype_to_mode ( mime_type ) # Get perceptual processing mode from mimetype. Parameters: Name Type Description Default mime_type str RFC-6838 mediatype string required Returns: Type Description Processing mode (\"text\", \"image\", \"audio\", \"video\") Exceptions: Type Description ValueError if no matching processing mode was found.","title":"Mediatype"},{"location":"mediatype/#iscc-mediatype-detection","text":"Detect and map RFC6838 mediatypes to ISCC processing modes.","title":"ISCC - Mediatype Detection"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_and_mode","text":"Detect mediatype and processing mode for a file. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_and_mode('some.pdf') ('application/pdf', 'text') Parameters: Name Type Description Default fp str Filepath required Returns: Type Description tuple[str, str] A tuple of mediatype and mode","title":"mediatype_and_mode()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_guess","text":"Guess mediatype from raw data or filename. First try to guess by file extension. If that fails we match by content sniffing. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_guess(b'GIF89a') 'image/gif' Parameters: Name Type Description Default data bytes Raw file data (first 4096 bytes recommended) required file_name Optional[str] Filename for guessing based on file extension None Returns: Type Description str Media type sting","title":"mediatype_guess()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_normalize","text":"Normalize mediatype string. Example >>> import iscc_sdk >>> iscc_sdk.mediatype_normalize(\"audio/x-aiff\") '\"audio/aiff\"' Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description str Normalized mediatype string","title":"mediatype_normalize()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_supported","text":"Check if mediatype is supported. Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description bool True if mediatype is supported","title":"mediatype_supported()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_from_name","text":"Guess mediatype from filename or URL. Parameters: Name Type Description Default name str Filename or URL required Returns: Type Description str Mediatype string","title":"mediatype_from_name()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_from_data","text":"Guess mediatype by sniffing raw header data. Parameters: Name Type Description Default data bytes Raw fileheader data (first 4096 bytes recommended) required Returns: Type Description str Mediatype string","title":"mediatype_from_data()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_clean","text":"Clean mediatype/content-type string or first entry of a list of mimetype strings. Also removes semicolon separated encoding information. Returns: Type Description str Mediatype string","title":"mediatype_clean()"},{"location":"mediatype/#iscc_sdk.mediatype.mediatype_to_mode","text":"Get perceptual processing mode from mimetype. Parameters: Name Type Description Default mime_type str RFC-6838 mediatype string required Returns: Type Description Processing mode (\"text\", \"image\", \"audio\", \"video\") Exceptions: Type Description ValueError if no matching processing mode was found.","title":"mediatype_to_mode()"}]}