{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ISCC - Software Development Kit #","title":"Overview"},{"location":"#iscc-software-development-kit","text":"","title":"ISCC - Software Development Kit"},{"location":"image/","text":"ISCC - Image Processing # Image handling module image_normalize ( img ) # Normalize image for hash calculation. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Sequence[int] Normalized and flattened image as 1024-pixel array (from 32x32 gray pixels) image_exif_transpose ( img ) # Transpose image according to EXIF Orientation tag Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image EXIF transposed image image_fill_transparency ( img ) # Add white background to image if it has alpha transparency. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with transparency replaced by white background image_trim_border ( img ) # Trim uniform colored (empty) border. Takes the upper left pixel as reference for border color. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with uniform colored (empty) border removed. image_meta_extract ( fp ) # Extract metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description dict Metadata mapped to IsccMeta schema image_meta_embed ( fp , meta ) # Embed metadata into image. Parameters: Name Type Description Default fp str Filepath to image file required meta IsccMeta Metadata to embed into image required Returns: Type Description None image_meta_delete ( fp ) # Delete all metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required image_thumbnail ( fp ) # Create a thumbnail for an image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description Image.Image Thumbnail image as PIL Image object image_to_data_url ( img ) # Convert PIL Image object to WebP Data-URL. Parameters: Name Type Description Default img Image.Image PIL Image object to encode as WebP Data-URL. required Returns: Type Description str Data-URL string","title":"Images"},{"location":"image/#iscc-image-processing","text":"Image handling module","title":"ISCC - Image Processing"},{"location":"image/#iscc_sdk.image.image_normalize","text":"Normalize image for hash calculation. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Sequence[int] Normalized and flattened image as 1024-pixel array (from 32x32 gray pixels)","title":"image_normalize()"},{"location":"image/#iscc_sdk.image.image_exif_transpose","text":"Transpose image according to EXIF Orientation tag Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image EXIF transposed image","title":"image_exif_transpose()"},{"location":"image/#iscc_sdk.image.image_fill_transparency","text":"Add white background to image if it has alpha transparency. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with transparency replaced by white background","title":"image_fill_transparency()"},{"location":"image/#iscc_sdk.image.image_trim_border","text":"Trim uniform colored (empty) border. Takes the upper left pixel as reference for border color. Parameters: Name Type Description Default img Image.Image Pillow Image Object required Returns: Type Description Image.Image Image with uniform colored (empty) border removed.","title":"image_trim_border()"},{"location":"image/#iscc_sdk.image.image_meta_extract","text":"Extract metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description dict Metadata mapped to IsccMeta schema","title":"image_meta_extract()"},{"location":"image/#iscc_sdk.image.image_meta_embed","text":"Embed metadata into image. Parameters: Name Type Description Default fp str Filepath to image file required meta IsccMeta Metadata to embed into image required Returns: Type Description None","title":"image_meta_embed()"},{"location":"image/#iscc_sdk.image.image_meta_delete","text":"Delete all metadata from image. Parameters: Name Type Description Default fp str Filepath to image file. required","title":"image_meta_delete()"},{"location":"image/#iscc_sdk.image.image_thumbnail","text":"Create a thumbnail for an image. Parameters: Name Type Description Default fp str Filepath to image file. required Returns: Type Description Image.Image Thumbnail image as PIL Image object","title":"image_thumbnail()"},{"location":"image/#iscc_sdk.image.image_to_data_url","text":"Convert PIL Image object to WebP Data-URL. Parameters: Name Type Description Default img Image.Image PIL Image object to encode as WebP Data-URL. required Returns: Type Description str Data-URL string","title":"image_to_data_url()"},{"location":"mime/","text":"ISCC - Mediatypes # Detect and map RFC6838 Mediatypes to ISCC processing modes. mime_guess ( data , file_name = None ) # Guess Media Type from raw data or filename. First try to guess by file extension. If that fails we match by content sniffing. Example >>> import iscc_sdk >>> iscc_sdk.mime_guess(b'GIF89a') 'image/gif' Parameters: Name Type Description Default data bytes Raw file data (first 4096 bytes recommended) required file_name Optional[str] Filename for guessing based on file extension None Returns: Type Description str Media type sting mime_normalize ( mime ) # Normalize mediatype string. Example >>> import iscc_sdk >>> iscc_sdk.mime_normalize(\"audio/x-aiff\") '\"audio/aiff\"' Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description str Normalized mediatype string mime_supported ( mime ) # Check if mediatype is supported. Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description bool True if mediatype is supported mime_from_name ( name ) # Guess mediatype from filename or URL. Parameters: Name Type Description Default name str Filename or URL required Returns: Type Description str Mediatype string mime_from_data ( data ) # Guess mediatype by sniffing raw header data. Parameters: Name Type Description Default data bytes Raw fileheader data (first 4096 bytes recommended) required Returns: Type Description str Mediatype string mime_clean ( mime ) # Clean mediatype/content-type string or first entry of a list of mimetype strings. Also removes semicolon separated encoding information. Returns: Type Description str Mediatype string mime_to_mode ( mime_type ) # Get perceptual processing mode from mimetype. Parameters: Name Type Description Default mime_type str RFC-6838 mediatype string required Returns: Type Description Processing mode (\"text\", \"image\", \"audio\", \"video\") Exceptions: Type Description ValueError if no matching processing mode was found.","title":"Mediatypes"},{"location":"mime/#iscc-mediatypes","text":"Detect and map RFC6838 Mediatypes to ISCC processing modes.","title":"ISCC - Mediatypes"},{"location":"mime/#iscc_sdk.mime.mime_guess","text":"Guess Media Type from raw data or filename. First try to guess by file extension. If that fails we match by content sniffing. Example >>> import iscc_sdk >>> iscc_sdk.mime_guess(b'GIF89a') 'image/gif' Parameters: Name Type Description Default data bytes Raw file data (first 4096 bytes recommended) required file_name Optional[str] Filename for guessing based on file extension None Returns: Type Description str Media type sting","title":"mime_guess()"},{"location":"mime/#iscc_sdk.mime.mime_normalize","text":"Normalize mediatype string. Example >>> import iscc_sdk >>> iscc_sdk.mime_normalize(\"audio/x-aiff\") '\"audio/aiff\"' Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description str Normalized mediatype string","title":"mime_normalize()"},{"location":"mime/#iscc_sdk.mime.mime_supported","text":"Check if mediatype is supported. Parameters: Name Type Description Default mime str Mediatype sting required Returns: Type Description bool True if mediatype is supported","title":"mime_supported()"},{"location":"mime/#iscc_sdk.mime.mime_from_name","text":"Guess mediatype from filename or URL. Parameters: Name Type Description Default name str Filename or URL required Returns: Type Description str Mediatype string","title":"mime_from_name()"},{"location":"mime/#iscc_sdk.mime.mime_from_data","text":"Guess mediatype by sniffing raw header data. Parameters: Name Type Description Default data bytes Raw fileheader data (first 4096 bytes recommended) required Returns: Type Description str Mediatype string","title":"mime_from_data()"},{"location":"mime/#iscc_sdk.mime.mime_clean","text":"Clean mediatype/content-type string or first entry of a list of mimetype strings. Also removes semicolon separated encoding information. Returns: Type Description str Mediatype string","title":"mime_clean()"},{"location":"mime/#iscc_sdk.mime.mime_to_mode","text":"Get perceptual processing mode from mimetype. Parameters: Name Type Description Default mime_type str RFC-6838 mediatype string required Returns: Type Description Processing mode (\"text\", \"image\", \"audio\", \"video\") Exceptions: Type Description ValueError if no matching processing mode was found.","title":"mime_to_mode()"}]}